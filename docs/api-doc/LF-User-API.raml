#%RAML 1.0
title: Lost and Found Platform
version: 0.1
description: RESTful APIs of this platform
protocols: HTTPS

/user:
  description: APIs in user mode
  post:
    description: Create a user
    body:
      application/json:
        type: Creator
        example:
          username: melo
          email: melo@gaoyuexiang.cn
          password: my-password
    responses:
      400:
        description: No enough msg to create a user
        body:
          application/json:
            type: Message
            example:
              msg: please input all msg
      409:
        description: Username or email are used
        body:
          application/json:
            type: Message
            example:
              msg: username is used
      200:
        description: Accepted request, but need verify email
        body:
          application/json:
            type: Message
            example:
              msg: user created
  /login:
    description: sign in user or check if sign in
    post:
      description: sign in user
      body:
        application/json:
          type: Loginer
          examples:
            useName:
              username: melo
              password: my-password
            useMail:
              email: melo@gaoyuexiang.cn
              password: my-password
      responses:
        200:
          description: Login success
          body:
            application/json:
              type: Token
              example:
                token: my token
        400:
          description: Message for login missed
          body:
            application/json:
              type: Message
              example:
                msg: password missed
        401:
          description: Message for login deny
          body:
            application/json:
              type: Message
              example:
                msg: password error
    /{username}:
      uriParameters:
        username:
          required: true
      delete:
        description: logout
        headers:
          user-token:
            type: string
        responses:
          200:
            description: Logout success, refresh html now
            body:
              application/json:
                type: Message
                example:
                  msg: logout success
          401:
            description: Token and username not match
      get:
        description: Get user's state of login
        headers:
          user-token:
            type: string
        responses:
          200:
            description: user is online
            body:
              application/json:
                type: Message
                example:
                  msg: online
          401:
            description: Token and username not match
            body:
              application/json:
                type: Message
                example:
                  msg: unauthorized
          404:
            description: user is offline or user in not exist
            body:
              application/json:
                type: Message
                example:
                  msg: offline
  /info:
    post:
      description: create user information
      headers:
        username: string
        user-token: string
      body:
        application/json:
          type: UserInfo
      responses:
        200:
          description: create success
          body:
            application/json:
              type: Message
              example:
                msg: success
        401:
          description: unauthorized
          body:
            application/json:
              type: Message
              example:
                msg: unauthorized
    /{username}:
      uriParameters:
        username:
          required: true
      get:
        responses:
          200:
            description: Get info success
            body:
              application/json:
                type: UserInfo
                example:
                  nickName: nick
                  about: about me
                  weiboName: wei
                  blog: b
          404:
            description: Username not found
            body:
              application/json:
                type: Message
                example:
                  msg: user is not exist
      put:
        description: update user's infomation
        headers:
          user-token: string
        body:
          application/json:
            type: UserInfo
            example:
              nickName: nick
              about: about me
              weiboName: wei
              blog: b
        responses:
          200:
            description: update success
            body:
              application/json:
                type: UserInfo
                example:
                  nickName: nick
                  about: about me
                  weiboName: wei
                  blog: b
          401:
            description: authorize failed
            body:
              application/json:
                type: Message
                example:
                  msg: username and token not match
          404:
            description: user not found
            body:
              application/json:
                type: Message
                example:
                  msg: user not found
      /security:
        description: username, email, email-enable etc.
        get:
          headers:
            user-token: string
          description: get security info
          responses:
            200:
              description: get info success
              body:
                application/json:
                  type: SecurityUserInfo
                  example:
                    username: username
                    email: email
                    emailEnable: false
            401:
              description: username and token not match, or username is not exist
              body:
                application/json:
                  type: Message
                  example:
                    msg: unauzhorized
        put:
          description: update security info
          headers:
            user-token: string
          body:
            application/json:
              type: SecurityInfoUpdater
          responses:
            200:
              description: update success
              body:
                application/json:
                  type: Message
                  example:
                    msg: update success
            401:
              description: username and token not match, or username is not exist
              body:
                application/json:
                  type: Message
                  example:
                    msg: unauthorized
  /email/{email}/:
    uriParameters:
      email:
        type: string
        description: user's email
    /verification:
      put:
        description: verify email
        headers:
          username: string
          user-token: string
        body:
          application/json:
            type: Token
            example:
              token: token for verify
        responses:
          200:
            description: verify success
            body:
              application/json:
                type: Message
                example:
                  msg: verify success
          401:
            description: email, username, user-token and email-token, any of them out match
            body:
              application/json:
                type: Message
                example:
                  msg: unauthorized
          410:
            description: email-token expired
            body:
              application/json:
                type: Message
                example:
                  msg: token expired
      /application:
        description: apply to verify email
        put:
          headers:
            user-token: string
          responses:
            200:
              description: mail was sent
              body:
                application/json:
                  type: Message
                  example:
                    msg: mail was sent
            400:
              description: msg is not enough
              body:
                application/json:
                  type: Message
                  example:
                    msg: msg is not enough
            401:
              description: email and username is not match
              body:
                application/json:
                  type: Message
                  example:
                    msg: authorize failed
            404:
              description: user is not exist
              body:
                application/json:
                  type: Message
                  example:
                    msg: user is not exist

types:
  Creator:
    type: object
    properties:
      username: string
      email: string
      password: string
  Message:
    type: object
    properties:
      msg: string
  Loginer:
    type: object
    properties:
      username:
        type: string
        required: false
      email:
        type: string
        required: false
      password: string
  Token:
    type: object
    properties:
      token: string
  UserInfo:
    type: object
    properties:
      nickName: string
      about: string
      weiboName: string
      blog: string
  EmailVerifier:
    type: object
    properties:
      email: string
      token: string
  SecurityUserInfo:
    type: object
    properties:
      username: string
      email: string
      emailEnable: boolean
  SecurityInfoUpdater:
    type: object
    properties:
      email: string
